AWSTemplateFormatVersion: 2010-09-09
Description: "VPC creation"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "172.16.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # creating a public subnet
  #AZ 1
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A

  # creating a private subnet for the application, so that it cannot be access from the internet
  #AZ 1

  AppPrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A

  # created a private subnet for the application database
  #AZ 1
  DataPrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: DataPrivateSubnet1A

  # creating a public subnet
  #AZ 2
  PublicSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B

  # creating a private subnet for the application, so that it cannot be access from the internet
  #AZ 2

  AppPrivateSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.5.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2B

  # created a private subnet for the application database
  #AZ 2
  DataPrivateSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.6.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2B

  # creating internet gateway igw

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: MyVPC-IGW

  # Attaching internet gateway to VPC

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  #Creating public route table

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # specifying a single route in the public route table upon
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # public subnet association with PublicSubnet1A

  PublicSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  # Bastion host EC2

 
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: bastion
      ImageId: ami-0fd24d6aedf1e76c3
      SubnetId: !Ref PublicSubnet1A
      SecurityGroupIds:
        - !Ref BastionSG
      Tags:
        - Key: Name
          Value: BastionHost

  # Bastion ingress-Security group
  # had to find my own personal Ip address using google in order to allow me to SSH onto the bastion host

  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 117.102.141.124/32

# creating AppInstance1A 

  AppInstance1A:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
         InstanceType: t2.micro
         KeyName: !Ref bastion 
         ImageId: ami-0fd24d6aedf1e76c3
         SubnetId: !Ref AppPrivateSubnet1A
         SecurityGroupIds:
          - !Ref AppInstanceASG
         Tags:
            - Key: Name 
              Value: AppInstance1A


# second app instance in the second AZ

   AppInstance2B:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
         InstanceType: t2.micro
         KeyName: !Ref bastion 
         ImageId: ami-0fd24d6aedf1e76c3
         SubnetId: !Ref AppPrivateSubnet1B
         SecurityGroupIds:
          - !Ref AppInstance2BASG
         Tags:
            - Key: Name 
              Value: AppInstance1A