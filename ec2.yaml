AWSTemplateFormatVersion: 2010-09-09
Description: "VPC creation"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "172.16.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: My-VPC

  # creating a public subnet
  #AZ 1
  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A

  # creating a private subnet for the application, so that it cannot be access from the internet
  #AZ 1

  AppPrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A

  # created a private subnet for the application database
  #AZ 1
  DataPrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.3.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: DataPrivateSubnet1A



  # creating a public subnet
  #AZ 2
  PublicSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.4.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B

  # creating a private subnet for the application, so that it cannot be access from the internet
  #AZ 2

  AppPrivateSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.5.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2B

  # created a private subnet for the application database
  #AZ 2
  DataPrivateSubnet2B:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "172.16.6.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2B

  # creating internet gateway igw

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: MyVPC-IGW

  # Attaching internet gateway to VPC

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  #Creating public route table

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # specifying a single route in the public route table upon
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # public subnet association with PublicSubnet1A

  PublicSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable


# Creating the ALB
# ALB sits in the public subnets

  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnet1A
        - !Ref PublicSubnet2B
      SecurityGroups:
        - !Ref WebServerSecurityGroup 


# Creating Target Group 

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref MyVPC
      HealthCheckEnabled: true 
      Port: 80
      Protocol: 'HTTP'


# listener for ALB 
  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: 'HTTP'

# creating WebServers & ALB Security group
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'


# WebServerInstance1A
# creating instance that will be targeted by our Target-group
# install apache server on WebServerInstance1A
  WebServerInstance1A:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0474411b350de35fb'
      SubnetId: !Ref PublicSubnet1A
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: 'Name' 
          Value: 'WebServerInstance1A'
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y httpd
          systemctl start httpd 
          systemctl enable httpd
          echo "Hello from Web Server 1A" > /var/www/html/.index



# WebServerInstance2B
# creating instance that will be targeted by our Target-group
# install apache server on WebServerInstance2B
  WebServerInstance2B:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0474411b350de35fb'
      SubnetId: !Ref PublicSubnet2B
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      Tags:
        - Key: 'Name' 
          Value: 'WebServerInstance2B'
      UserData: 
        Fn::Base64: !Sub |
        #!/bin/bash
        yum install -y httpd
        systemctl start httpd 
        systemctl enable httpd
        echo "Hello from Web Server 2B" > /var/www/html/.index


